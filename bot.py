import os

import asyncio
import requests
import telebot
import threading
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from models import Base, CoinValues
from constants import ROUNDER_VALUE

load_dotenv()

BOT_API_KEY = os.getenv('YOUR_API_KEY')
CHAT_ID = os.getenv('YOUR_CHAT_ID')
COIN_API_KEY = os.getenv('COIN_MARKET_API_KEY')
INTERVAL = os.getenv('INTERVAL_TIME')
DESCRIPTION = (
    '–≠—Ç–æ—Ç –±–æ—Ç ü§ñ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö —Å—É–º–º ü™ô–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞/USDüí≤,'
    ' min üëáüëÜ max , –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'
    ' üì© –≤ —á–∞—Ç. –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚öôÔ∏è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update.'
    '–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä'
    ' –∏ –∏—Ö min/max –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /show'
)

bot = telebot.TeleBot(BOT_API_KEY)

engine = create_engine('sqlite:///coin_values.db')
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()


def send_message(message):
    bot.send_message(chat_id=CHAT_ID, text=message)


def get_price(coin):
    url = os.getenv('URL_MARKET')
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': COIN_API_KEY
    }
    parameters = {
        'symbol': coin,
        'convert': 'USD'
    }
    response = requests.get(url, headers=headers, params=parameters)
    data = response.json()
    return round(data['data'][coin]['quote']['USD']['price'], ROUNDER_VALUE)


async def tracking_values(coin, min_price, max_price):
    while True:
        price = get_price(coin)
        if price <= min_price:
            send_message(
                f'–¶–µ–Ω–∞ {coin}={price}$, '
                f'–¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞: ${min_price}'
            )
        elif price >= max_price:
            send_message(
                f'–¶–µ–Ω–∞ {coin}={price}$, '
                f'–¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞: ${max_price}'
            )
        await asyncio.sleep(int(INTERVAL))


def polling_thread():
    bot.polling()


async def main():
    coin_values = session.query(CoinValues).all()

    tasks = []
    for coin_value in coin_values:
        task = asyncio.create_task(
            tracking_values(
                coin_value.coin_name,
                coin_value.min_price,
                coin_value.max_price,
            )
        )
        tasks.append(task)
    await asyncio.gather(*tasks)


@bot.message_handler(commands=['update'])
def update_message(message):
    bot.send_message(
        chat_id=CHAT_ID,
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '
        '–¢–∏–∫–µ—Ä, min, max'
    )


@bot.message_handler(commands=['show'])
def show_message(message):
    coin_values = session.query(CoinValues).all()
    if coin_values:
        message = "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n"
        for coin_value in coin_values:
            message += (
                f"{coin_value.coin_name}: min - "
                f"{coin_value.min_price}$, max - {coin_value.max_price}$\n"
            )
    else:
        message = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
    bot.send_message(chat_id=CHAT_ID, text=message)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text.startswith('/') and message.text != '/update':
        bot.send_message(
            chat_id=CHAT_ID,
            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π '
            '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update'
        )
    else:
        try:
            coin, min_price, max_price = message.text.split(',')
            coin = coin.strip().upper()
            min_price = float(min_price.strip())
            max_price = float(max_price.strip())

            existing_coin = session.query(
                CoinValues).filter_by(coin_name=coin).first()
            if existing_coin:
                existing_coin.min_price = min_price
                existing_coin.max_price = max_price
            else:
                new_coin = CoinValues(
                    coin_name=coin, min_price=min_price,
                    max_price=max_price, user_id=CHAT_ID
                )
                session.add(new_coin)
            session.commit()
            bot.send_message(
                chat_id=CHAT_ID, text='–ó–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
            )

        except Exception:
            bot.send_message(
                chat_id=CHAT_ID, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π. '
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ '
                '–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
            )


if __name__ == '__main__':
    send_message(DESCRIPTION)
    polling_thread = threading.Thread(target=polling_thread)
    polling_thread.start()
    asyncio.run(main())
    polling_thread.join()
