import os

import requests
import telebot
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from models import Base, CoinValues
from constants import ROUNDER_VALUE

load_dotenv()

BOT_API_KEY = os.getenv('YOUR_API_KEY')
COIN_API_KEY = os.getenv('COIN_MARKET_API_KEY')
INTERVAL = os.getenv('INTERVAL_TIME')
DESCRIPTION = (
    '–≠—Ç–æ—Ç –±–æ—Ç ü§ñ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö —Å—É–º–º ü™ô–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞/USDüí≤,'
    ' min üëáüëÜ max , –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏, '
    ' –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ üì© –≤ —á–∞—Ç. '
    ' –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä'
    ' –∏ –∏—Ö min/max –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /show'
    ' –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚öôÔ∏è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update.'
    ' –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ online –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tracking'
    ' –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
)

bot = telebot.TeleBot(BOT_API_KEY)

engine = create_engine('sqlite:///coin_values.db')
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()


def get_price(coin):
    ''' –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. '''
    url = os.getenv('URL_MARKET')
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': COIN_API_KEY
    }
    parameters = {
        'symbol': coin,
        'convert': 'USD'
    }
    response = requests.get(url, headers=headers, params=parameters)
    data = response.json()
    return round(data['data'][coin]['quote']['USD']['price'], ROUNDER_VALUE)


def tracking_values(user_id):
    ''' –ú–µ—Ç–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—Ç–∏—Ä–æ–≤–æ–∫. '''
    coin_values = session.query(CoinValues).filter_by(user_id=user_id).all()
    any_coin_in_range = False
    for coin_value in coin_values:
        coin = coin_value.coin_name
        min_price = coin_value.min_price
        max_price = coin_value.max_price
        price = get_price(coin)
        if price <= min_price:
            bot.send_message(
                chat_id=user_id,
                text=f'–¶–µ–Ω–∞ {coin}={price}$, '
                f'–¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞: ${min_price}'
            )
            any_coin_in_range = True
        elif price >= max_price:
            bot.send_message(
                chat_id=user_id,
                text=f'–¶–µ–Ω–∞ {coin}={price}$, '
                f'–¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞: ${max_price}'
            )
            any_coin_in_range = True

    if not any_coin_in_range:
        bot.send_message(
            chat_id=user_id,
            text='–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.'
        )


@bot.message_handler(commands=['start'])
def start_message(message):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start'''
    bot.send_message(chat_id=message.chat.id, text=DESCRIPTION)


@bot.message_handler(commands=['update'])
def update_message(message):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update'''
    bot.send_message(
        chat_id=message.chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '
        '–¢–∏–∫–µ—Ä, min, max'
    )


@bot.message_handler(commands=['show'])
def show_message(message):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show '''
    user_id = message.chat.id
    coin_values = session.query(CoinValues).filter_by(
        user_id=user_id
    ).all()
    if coin_values:
        answer = "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n"
        for coin_value in coin_values:
            answer += (
                f"{coin_value.coin_name}: min - "
                f"{coin_value.min_price}$, max - {coin_value.max_price}$\n"
            )
    else:
        answer = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
    bot.send_message(chat_id=message.chat.id, text=answer)


@bot.message_handler(commands=['tracking'])
def tracking_message(message):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tracking'''
    user_id = message.chat.id
    tracking_values(user_id)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    ''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–∞–Ω–¥.'''
    if message.text.startswith('/') and message.text != '/update':
        bot.send_message(
            chat_id=message.chat.id,
            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π '
            '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update'
        )
    else:
        try:
            coin, min_price, max_price = message.text.split(',')
            coin = coin.strip().upper()
            min_price = float(min_price.strip())
            max_price = float(max_price.strip())
            user_id = message.chat.id
            existing_coin = session.query(
                CoinValues).filter_by(
                    coin_name=coin,
                    user_id=user_id
                ).first()
            if existing_coin:
                existing_coin.min_price = min_price
                existing_coin.max_price = max_price
                existing_coin.user_id = user_id
            else:
                new_coin = CoinValues(
                    coin_name=coin, min_price=min_price,
                    max_price=max_price, user_id=user_id
                )
                session.add(new_coin)
            session.commit()
            bot.send_message(
                chat_id=user_id, text='–ó–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
            )

        except Exception:
            bot.send_message(
                chat_id=message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π.'
                ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤'
                ' —Ñ–æ—Ä–º–∞—Ç–µ: –¢–∏–∫–µ—Ä, min, max.'
            )


if __name__ == '__main__':
    bot.polling()
